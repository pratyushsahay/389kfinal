'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nbaStatsClient = require('nba-stats-client');

var _nbaStatsClient2 = _interopRequireDefault(_nbaStatsClient);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _immutable = require('immutable');

var _ScoreboardGamesTranslator = require('../translators/ScoreboardGamesTranslator');

var _ScoreboardGamesTranslator2 = _interopRequireDefault(_ScoreboardGamesTranslator);

var _BoxScoreDataTranslator = require('../translators/BoxScoreDataTranslator');

var _BoxScoreDataTranslator2 = _interopRequireDefault(_BoxScoreDataTranslator);

var _PlayByPlayTranslator = require('../translators/PlayByPlayTranslator');

var _PlayByPlayTranslator2 = _interopRequireDefault(_PlayByPlayTranslator);

var _AggregatedGame = require('../models/AggregatedGame');

var _AggregatedGame2 = _interopRequireDefault(_AggregatedGame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DataAggregator = function () {
  function DataAggregator() {
    _classCallCheck(this, DataAggregator);
  }

  _createClass(DataAggregator, null, [{
    key: 'aggregate',
    value: function aggregate(year, month, day) {
      return DataAggregator.getTranslatedGames(year, month, day).then(function (games) {
        var ids = (0, _immutable.List)(games.map(function (game) {
          return game.id;
        }));
        return _bluebird2.default.all([DataAggregator.getTranslatedBoxScores(year, month, day, ids), DataAggregator.getTranslatedPlayByPlays(year, month, day, ids), games]);
      }).then(function (data) {
        return DataAggregator.buildSortedGames(DataAggregator.buildAggregatedGames(data[0], data[1], data[2]));
      });
    }
  }, {
    key: 'buildSortedGames',
    value: function buildSortedGames(games) {
      var upcoming = (0, _immutable.List)();
      var active = (0, _immutable.List)();
      games.forEach(function (game) {
        if (game.metadata.isUpcoming()) {
          upcoming = upcoming.push(game);
        } else {
          active = active.push(game);
        }
      });

      return (0, _immutable.Map)({
        upcoming: upcoming,
        active: active
      });
    }
  }, {
    key: 'buildAggregatedGames',
    value: function buildAggregatedGames(boxScores, playByPlays, games) {
      if (boxScores.size !== playByPlays.size) {
        throw new RangeError('box scores and play by plays must have same size');
      }

      if (boxScores.size !== games.size) {
        throw new RangeError('box scores and play by plays must have same size');
      }

      var data = (0, _immutable.List)();
      for (var i = 0; i < games.size; i++) {
        var aggregatedGame = new _AggregatedGame2.default({
          metadata: games.get(i),
          boxScoreLeaders: boxScores.get(i),
          playByPlay: playByPlays.get(i)
        });
        data = data.push(aggregatedGame);
      }

      return data.sortBy(function (value) {
        return value.metadata.id;
      });
    }
  }, {
    key: 'getTranslatedGames',
    value: function getTranslatedGames(year, month, day) {
      if (typeof year !== 'number') {
        throw new TypeError('year must be a number');
      }

      if (typeof month !== 'number') {
        throw new TypeError('month must be a number');
      }

      if (typeof day !== 'number') {
        throw new TypeError('day must be a number');
      }

      return _nbaStatsClient2.default.getGames(year, month, day).then(function (games) {
        return _ScoreboardGamesTranslator2.default.translate(games);
      });
    }
  }, {
    key: 'getTranslatedBoxScores',
    value: function getTranslatedBoxScores(year, month, day, gameIds) {
      var translations = gameIds.map(function (gameId) {
        return DataAggregator.getTranslatedBoxScore(year, month, day, gameId);
      });
      return _bluebird2.default.all(translations).then(function (results) {
        return (0, _immutable.List)(results);
      }).catch(function (reason) {
        return console.log(reason);
      });
    }
  }, {
    key: 'getTranslatedBoxScore',
    value: function getTranslatedBoxScore(year, month, day, gameId) {
      return _nbaStatsClient2.default.getBoxScore(year, month, day, gameId).then(function (boxScore) {
        return _BoxScoreDataTranslator2.default.translateBoxScoreData(boxScore);
      });
    }
  }, {
    key: 'getTranslatedPlayByPlays',
    value: function getTranslatedPlayByPlays(year, month, day, gameIds) {
      var translations = gameIds.map(function (gameId) {
        return DataAggregator.getTranslatedPlayByPlay(year, month, day, gameId);
      });
      return _bluebird2.default.all(translations).then(function (results) {
        return (0, _immutable.List)(results);
      }).catch(function (reason) {
        return console.log(reason);
      });
    }
  }, {
    key: 'getTranslatedPlayByPlay',
    value: function getTranslatedPlayByPlay(year, month, day, gameId) {
      return _nbaStatsClient2.default.getPlayByPlay(year, month, day, gameId).then(function (playByPlay) {
        return _PlayByPlayTranslator2.default.translate(playByPlay);
      });
    }
  }]);

  return DataAggregator;
}();

exports.default = DataAggregator;
;