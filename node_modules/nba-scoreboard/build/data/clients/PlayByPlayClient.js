'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _PlayByPlayDataTranslator = require('../../translators/data/PlayByPlayDataTranslator');

var _PlayByPlayDataTranslator2 = _interopRequireDefault(_PlayByPlayDataTranslator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PlayByPlayClient = function () {
  function PlayByPlayClient() {
    _classCallCheck(this, PlayByPlayClient);

    this.playByPlayDataTranslator = new _PlayByPlayDataTranslator2.default();
    this.basePlayByPlayUrl = "http://data.nba.com/data/5s/json/cms/noseason/game";
  }

  _createClass(PlayByPlayClient, [{
    key: 'generatePlayByPlayUrl',
    value: function generatePlayByPlayUrl(formattedGameDate, gameId) {
      return this.basePlayByPlayUrl + '/' + formattedGameDate + '/' + gameId + '/pbp_all.json';
    }
  }, {
    key: 'fetch',
    value: function fetch(formattedGameDate, gameId) {
      var _this = this;

      var playByPlayUrl = this.generatePlayByPlayUrl(formattedGameDate, gameId);
      return (0, _requestPromise2.default)({ uri: playByPlayUrl, json: true }).then(function (playByPlayData) {
        return _this.playByPlayDataTranslator.translatePlayByPlayData(playByPlayData);
      }).catch(function (err) {
        return console.log(err);
      });
    }
  }]);

  return PlayByPlayClient;
}();

exports.default = PlayByPlayClient;