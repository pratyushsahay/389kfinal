'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _BoxScoreClient = require('./clients/BoxScoreClient');

var _BoxScoreClient2 = _interopRequireDefault(_BoxScoreClient);

var _PlayByPlayClient = require('./clients/PlayByPlayClient');

var _PlayByPlayClient2 = _interopRequireDefault(_PlayByPlayClient);

var _ScoreboardClient = require('./clients/ScoreboardClient');

var _ScoreboardClient2 = _interopRequireDefault(_ScoreboardClient);

var _GameData = require('./models/GameData');

var _GameData2 = _interopRequireDefault(_GameData);

var _ScoreboardFilter = require('../filters/data/ScoreboardFilter.js');

var _ScoreboardFilter2 = _interopRequireDefault(_ScoreboardFilter);

var _Constants = require('../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameDataClient = function () {
  function GameDataClient() {
    _classCallCheck(this, GameDataClient);

    this.scoreboardClient = new _ScoreboardClient2.default();
    this.boxScoreClient = new _BoxScoreClient2.default();
    this.playByPlayClient = new _PlayByPlayClient2.default();
  }

  _createClass(GameDataClient, [{
    key: 'fetchDataForDateRange',
    value: function fetchDataForDateRange(startDate, endDate, callback) {
      var transformedStartDate = startDate.clone().tz(_Constants2.default.DEFAULT_TIMEZONE);
      var transformedEndDate = endDate.clone().tz(_Constants2.default.DEFAULT_TIMEZONE);
      var startDateUnixTimestampMilliseconds = transformedStartDate.valueOf();
      var endDateUnixTimestampMilliseconds = transformedEndDate.valueOf();
      for (var currentDate = startDate; currentDate.isBefore(endDate); currentDate.add(1, 'days')) {
        this.fetchDataForDate(currentDate, startDateUnixTimestampMilliseconds, endDateUnixTimestampMilliseconds, callback);
      }
    }
  }, {
    key: 'fetchDataForDate',
    value: function fetchDataForDate(date, startDateUnixTimestampMilliseconds, endDateUnixTimestampMilliseconds, callback) {
      var _this = this;

      var filteredScoreboardData = {};
      var playByPlay = {};
      var boxScore = {};
      var gameData = {};
      var formattedDate = NbaDataClient.generateCustomFormattedDate(date);
      this.scoreboardClient.fetch(formattedDate, function (scoreboardData) {
        filteredScoreboardData = _ScoreboardFilter2.default.filter(scoreboardData, startDateUnixTimestampMilliseconds, endDateUnixTimestampMilliseconds);
        return filteredScoreboardData;
      }).then(function (scoreboardData) {
        return _this.fetchPlayByPlayData(filteredScoreboardData, playByPlay);
      }).then(function (playByPlayData) {
        return _this.fetchBoxScoreData(filteredScoreboardData, boxScore);
      }).then(function (boxScoreData) {
        for (var gameId in filteredScoreboardData) {
          gameData[gameId] = new _GameData2.default({
            metadata: filteredScoreboardData[gameId].gameMetadata,
            scores: filteredScoreboardData[gameId].gameScores,
            boxScoreLeaders: boxScore[gameId],
            playByPlay: playByPlay[gameId]
          });
        }
        return gameData;
      }).then(function (gameData) {
        return callback(gameData);
      });
    }
  }, {
    key: 'fetchPlayByPlayData',
    value: function fetchPlayByPlayData(filteredGameData, playByPlay) {
      var _this2 = this;

      var promises = [];

      var _loop = function _loop(gameId) {
        var gameData = filteredGameData[gameId];
        if (NbaDataClient.shouldFetchData(gameData.gameMetadata.unixMillisecondsStartTime, gameData.status)) {
          (function () {
            var deferred = _q2.default.defer();
            var formattedGameDate = gameData.gameMetadata.getNbaStatsFormattedStartDate();
            _this2.playByPlayClient.fetch(formattedGameDate, gameId, function (data) {
              playByPlay[gameId] = data;
              deferred.resolve(data);
            });
            promises.push(deferred.promise);
          })();
        }
      };

      for (var gameId in filteredGameData) {
        _loop(gameId);
      };
      return _q2.default.all(promises);
    }
  }, {
    key: 'fetchBoxScoreData',
    value: function fetchBoxScoreData(filteredGameData, boxScore) {
      var _this3 = this;

      var promises = [];

      var _loop2 = function _loop2(gameId) {
        var gameData = filteredGameData[gameId];
        if (NbaDataClient.shouldFetchData(gameData.gameMetadata.unixMillisecondsStartTime, gameData.status)) {
          (function () {
            var deferred = _q2.default.defer();
            var formattedGameDate = gameData.gameMetadata.getNbaStatsFormattedStartDate();
            _this3.boxScoreClient.fetch(formattedGameDate, gameId, function (data) {
              boxScore[gameId] = data;
              deferred.resolve(data);
            });
            promises.push(deferred.promise);
          })();
        }
      };

      for (var gameId in filteredGameData) {
        _loop2(gameId);
      };
      return _q2.default.all(promises);
    }
  }], [{
    key: 'generateCustomFormattedDate',
    value: function generateCustomFormattedDate(date) {
      return date.clone().tz(_Constants2.default.DEFAULT_TIMEZONE).format(_Constants2.default.DEFAULT_DATE_FORMAT);
    }
  }, {
    key: 'shouldFetchData',
    value: function shouldFetchData(unixMillisecondsStartTime, gameStatus) {
      return (0, _momentTimezone2.default)().valueOf() >= unixMillisecondsStartTime && gameStatus != _Constants2.default.PREGAME;
    }
  }]);

  return GameDataClient;
}();

exports.default = GameDataClient;