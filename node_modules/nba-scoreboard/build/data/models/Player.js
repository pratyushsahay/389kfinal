'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaults = {
  firstName: '',
  lastName: ''
};

var Player = function (_Record) {
  _inherits(Player, _Record);

  function Player(firstName, lastName) {
    _classCallCheck(this, Player);

    if (typeof firstName !== "string") {
      throw new TypeError("player first name is not a string");
    }

    if (typeof lastName !== "string") {
      throw new TypeError("player last name is not a string");
    }

    return _possibleConstructorReturn(this, (Player.__proto__ || Object.getPrototypeOf(Player)).call(this, {
      firstName: firstName,
      lastName: lastName
    }));
  }

  _createClass(Player, [{
    key: 'getAbbreviatedFirstName',
    value: function getAbbreviatedFirstName() {
      if (this.firstName.length > 0) {
        return this.firstName.charAt(0);
      }

      return this.firstName;
    }
  }, {
    key: 'getAbbreviatedName',
    value: function getAbbreviatedName() {
      return this.getAbbreviatedFirstName() + '.' + this.lastName;
    }
  }]);

  return Player;
}((0, _immutable.Record)(defaults));

exports.default = Player;
;