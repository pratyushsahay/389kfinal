'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _Constants = require('../../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaults = {
  homeScore: 0,
  visitorScore: 0
};

var TotalScore = function (_Record) {
  _inherits(TotalScore, _Record);

  function TotalScore() {
    _classCallCheck(this, TotalScore);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(TotalScore).apply(this, arguments));
  }

  _createClass(TotalScore, [{
    key: 'getWinningTeam',
    value: function getWinningTeam() {
      var scoreDifference = this.homeScore - this.visitorScore;
      if (scoreDifference == 0) {
        return 'TIE';
      } else if (scoreDifference < 0) {
        return 'VISITOR';
      } else {
        return 'HOME';
      }
    }
  }, {
    key: 'getFormattedHomeScore',
    value: function getFormattedHomeScore() {
      return TotalScore.getFormattedScore(this.homeScore, this.visitorScore);
    }
  }, {
    key: 'getFormattedVisitorScore',
    value: function getFormattedVisitorScore() {
      return TotalScore.getFormattedScore(this.visitorScore, this.homeScore);
    }
  }], [{
    key: 'getFormattedScore',
    value: function getFormattedScore(score, opponentScore) {
      if (score == _Constants2.default.ONE_HUNDRED) {
        return _nodeEmoji2.default.get(_Constants2.default.SCORE_100_EMOJI_VALUE);
      }
      var strValue = score.toString();
      if (score > opponentScore) {
        return strValue.green;
      } else if (score < opponentScore) {
        return strValue.red;
      }

      return strValue.blue;
    }
  }]);

  return TotalScore;
}((0, _immutable.Record)(defaults));

exports.default = TotalScore;
;