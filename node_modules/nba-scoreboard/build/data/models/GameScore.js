'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _Constants = require('../../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _Outcome = require('./Outcome');

var _Outcome2 = _interopRequireDefault(_Outcome);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaults = {
  homeTeam: 0,
  awayTeam: 0
};

var GameScore = function (_Record) {
  _inherits(GameScore, _Record);

  function GameScore(score, opponentScore) {
    _classCallCheck(this, GameScore);

    if (typeof score !== 'number') {
      throw new TypeError('expected home score to be a number');
    }

    if (typeof opponentScore !== 'number') {
      throw new TypeError('expected visitor score to be a number');
    }

    if (score < 0) {
      throw new RangeError('score cannot be negative');
    }

    if (opponentScore < 0) {
      throw new RangeError('score cannot be negative');
    }

    return _possibleConstructorReturn(this, (GameScore.__proto__ || Object.getPrototypeOf(GameScore)).call(this, {
      score: score,
      opponentScore: opponentScore
    }));
  }

  _createClass(GameScore, [{
    key: 'getOutcome',
    value: function getOutcome() {
      var scoreDifferential = this.score - this.opponentScore;

      if (scoreDifferential == 0) {
        return _Outcome2.default.TIE;
      } else if (scoreDifferential > 0) {
        return _Outcome2.default.WIN;
      }

      return _Outcome2.default.LOSS;
    }
  }]);

  return GameScore;
}((0, _immutable.Record)(defaults));

exports.default = GameScore;
;