'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

var _Team = require('./Team');

var _Team2 = _interopRequireDefault(_Team);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaults = {
  homeTeam: new _Team2.default(),
  awayTeam: new _Team2.default()
};

var Matchup = function (_Record) {
  _inherits(Matchup, _Record);

  function Matchup(homeTeam, awayTeam) {
    _classCallCheck(this, Matchup);

    if (!(homeTeam instanceof _Team2.default)) {
      throw new TypeError('home team must be a Team object');
    }

    if (!(awayTeam instanceof _Team2.default)) {
      throw new TypeError('away team must be a Team object');
    }

    return _possibleConstructorReturn(this, (Matchup.__proto__ || Object.getPrototypeOf(Matchup)).call(this, {
      homeTeam: homeTeam,
      awayTeam: awayTeam
    }));
  }

  return Matchup;
}((0, _immutable.Record)(defaults));

exports.default = Matchup;