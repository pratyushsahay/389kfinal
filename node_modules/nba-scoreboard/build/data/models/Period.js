'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaults = {
  value: 1,
  status: '',
  clock: ''
};

var Period = function (_Record) {
  _inherits(Period, _Record);

  function Period(value, status, clock) {
    _classCallCheck(this, Period);

    if (typeof value !== 'number') {
      throw new TypeError('period value must be a number');
    }

    if (typeof status !== 'string') {
      throw new TypeError('period status must be a string');
    }

    if (typeof clock !== 'string') {
      throw new TypeError('period clock must be a string');
    }

    if (value < 0) {
      throw new RangeError('period value must be non-negative');
    }

    return _possibleConstructorReturn(this, (Period.__proto__ || Object.getPrototypeOf(Period)).call(this, {
      value: value,
      status: status,
      clock: clock
    }));
  }

  return Period;
}((0, _immutable.Record)(defaults));

exports.default = Period;