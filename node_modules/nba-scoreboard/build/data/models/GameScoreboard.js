'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _jstimezonedetect = require('jstimezonedetect');

var _jstimezonedetect2 = _interopRequireDefault(_jstimezonedetect);

var _GameStatus = require('./GameStatus');

var _GameStatus2 = _interopRequireDefault(_GameStatus);

var _Location = require('./Location');

var _Location2 = _interopRequireDefault(_Location);

var _Period = require('./Period');

var _Period2 = _interopRequireDefault(_Period);

var _Broadcast = require('./Broadcast');

var _Broadcast2 = _interopRequireDefault(_Broadcast);

var _BroadcastMedium = require('./BroadcastMedium');

var _BroadcastMedium2 = _interopRequireDefault(_BroadcastMedium);

var _Matchup = require('./Matchup');

var _Matchup2 = _interopRequireDefault(_Matchup);

var _Team = require('./Team');

var _Team2 = _interopRequireDefault(_Team);

var _GameScoring = require('./GameScoring');

var _GameScoring2 = _interopRequireDefault(_GameScoring);

var _Score = require('./Score');

var _Score2 = _interopRequireDefault(_Score);

var _Constants = require('../../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaults = {
  id: '',
  status: _GameStatus2.default.FINAL,
  startTimestamp: 0,
  location: new _Location2.default(),
  period: new _Period2.default(0, '', ''),
  broadcasts: new _immutable.List(),
  matchup: new _Matchup2.default(new _Team2.default(), new _Team2.default()),
  scoring: new _GameScoring2.default((0, _immutable.List)(), new _Score2.default(0, 0))
};

var GameScoreboard = function (_Record) {
  _inherits(GameScoreboard, _Record);

  function GameScoreboard(id, status, startTimestamp, location, period, broadcasts, matchup, scoring) {
    _classCallCheck(this, GameScoreboard);

    if (typeof id !== 'string') {
      throw new TypeError('id must be a string');
    }

    if (!(status instanceof _GameStatus2.default)) {
      throw new TypeError('status must be a game status');
    }

    if (typeof startTimestamp !== 'number') {
      throw new TypeError('start timestamp must be a number');
    }

    if (!(location instanceof _Location2.default)) {
      throw new TypeError('location must be a Location');
    }

    if (!(period instanceof _Period2.default)) {
      throw new TypeError('period must be a Period');
    }

    if (!(broadcasts instanceof _immutable.List)) {
      throw new TypeError('broadcasts must be an array');
    }

    if (!(matchup instanceof _Matchup2.default)) {
      throw new TypeError('matchup must be a Matchup');
    }

    if (!(scoring instanceof _GameScoring2.default)) {
      throw new TypeError('scoring must be a GameScoring object');
    }

    return _possibleConstructorReturn(this, (GameScoreboard.__proto__ || Object.getPrototypeOf(GameScoreboard)).call(this, {
      id: id,
      status: status,
      startTimestamp: startTimestamp,
      location: location,
      period: period,
      broadcasts: broadcasts,
      matchup: matchup,
      scoring: scoring
    }));
  }

  _createClass(GameScoreboard, [{
    key: 'getNbaStatsFormattedStartDate',
    value: function getNbaStatsFormattedStartDate() {
      var userTimezone = _jstimezonedetect2.default.determine().name();
      return (0, _momentTimezone2.default)(this.startTimestamp).tz(_Constants2.default.DEFAULT_TIMEZONE).format(_Constants2.default.DEFAULT_DATE_FORMAT);
    }
  }, {
    key: 'getLocalizedStartDateTime',
    value: function getLocalizedStartDateTime() {
      var userTimezone = _jstimezonedetect2.default.determine().name();
      return (0, _momentTimezone2.default)(this.startTimestamp).tz(userTimezone).format(_Constants2.default.TRANSLATED_DATE_FORMAT);
    }
  }, {
    key: 'getTvBroadcastsString',
    value: function getTvBroadcastsString() {
      var tvBroadcasts = (0, _immutable.List)();
      for (var i = 0; i < this.broadcasts.size; i++) {
        var broadcast = this.broadcasts.get(i);
        if (broadcast.medium === _BroadcastMedium2.default.TV) {
          tvBroadcasts = tvBroadcasts.push(broadcast.name);
        }
      }
      return tvBroadcasts.toJS().toString();
    }
  }, {
    key: 'isUpcoming',
    value: function isUpcoming() {
      return this.startTimestamp > (0, _momentTimezone2.default)().valueOf();
    }
  }, {
    key: 'hasStarted',
    value: function hasStarted() {
      return !this.isUpcoming() && this.status != _Constants2.default.PREGAME;
    }
  }]);

  return GameScoreboard;
}((0, _immutable.Record)(defaults));

exports.default = GameScoreboard;