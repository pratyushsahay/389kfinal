'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

var _PeriodScore = require('./PeriodScore');

var _PeriodScore2 = _interopRequireDefault(_PeriodScore);

var _Score = require('./Score');

var _Score2 = _interopRequireDefault(_Score);

var _Formatter = require('../../tables/formatters/Formatter');

var _Formatter2 = _interopRequireDefault(_Formatter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaults = {
  periodScores: new _immutable.List(),
  totalScore: new _Score2.default(0, 0)
};

var GameScoring = function (_Record) {
  _inherits(GameScoring, _Record);

  function GameScoring(periodScores, totalScore) {
    _classCallCheck(this, GameScoring);

    if (!(totalScore instanceof _Score2.default)) {
      throw new TypeError('total score must be a Score object');
    }

    return _possibleConstructorReturn(this, (GameScoring.__proto__ || Object.getPrototypeOf(GameScoring)).call(this, {
      periodScores: periodScores,
      totalScore: totalScore
    }));
  }

  _createClass(GameScoring, [{
    key: 'getPeriodValues',
    value: function getPeriodValues() {
      return this.periodScores.map(function (periodScore) {
        return _Formatter2.default.formatPeriodValue(periodScore.period);
      });
    }
  }]);

  return GameScoring;
}((0, _immutable.Record)(defaults));

exports.default = GameScoring;