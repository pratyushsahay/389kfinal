'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _jstimezonedetect = require('jstimezonedetect');

var _jstimezonedetect2 = _interopRequireDefault(_jstimezonedetect);

var _HtmlEscaper = require('../../utils/HtmlEscaper');

var _HtmlEscaper2 = _interopRequireDefault(_HtmlEscaper);

var _GameStatus = require('../models/GameStatus');

var _GameStatus2 = _interopRequireDefault(_GameStatus);

var _Constants = require('../../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _Location = require('../models/Location');

var _Location2 = _interopRequireDefault(_Location);

var _Period = require('../models/Period');

var _Period2 = _interopRequireDefault(_Period);

var _Broadcast = require('../models/Broadcast');

var _Broadcast2 = _interopRequireDefault(_Broadcast);

var _BroadcastMedium = require('../models/BroadcastMedium');

var _BroadcastMedium2 = _interopRequireDefault(_BroadcastMedium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameScoreboardTranslator = function () {
  function GameScoreboardTranslator() {
    _classCallCheck(this, GameScoreboardTranslator);
  }

  _createClass(GameScoreboardTranslator, null, [{
    key: 'translate',
    value: function translate(data) {
      if (!('sports_content' in data)) {
        throw new ReferenceError('sports content field missing');
      }

      if (!('games' in data.sports_content)) {
        throw new ReferenceError('games field missing');
      }

      var games = data.sports_content.games;
      var translatedGames = [];
      games.map(function (game) {
        return translatedGames.push(GameScoreboardTranslator.translateGames(games));
      });
      return _immutable.List.of(translatedGames);
    }
  }, {
    key: 'translateGames',
    value: function translateGames(data) {
      if (!('game' in data)) {
        throw new ReferenceError('game field missing');
      }

      if (!('period_time' in data.game)) {
        throw new ReferenceError('period_time field missing');
      }

      if (!('broadcasters' in data.game)) {
        throw new ReferenceError('broadcasters field missing');
      }

      if (!('home' in data.game)) {
        throw new ReferenceError('home field missing');
      }

      if (!('visitor' in data.game)) {
        throw new ReferenceError('visitor field missing');
      }

      var gameData = data.game;
      var periodTime = gameData.period_time;
      var broadcasters = gameData.broadcasters;
      var homeData = gameData.home;
      var awayData = gameData.visitor;

      return new GameScoreboard(gameData.id, GameScoreboardTranslator.getGameStatus(periodTime), GameScoreboardTranslator.getStartTimestamp(gameData), GameScoreboardTranslator.getLocation(gameData), GameScoreboardTranslator.getPeriod(periodTime), GameScoreboardTranslator.getBroadcasts(broadcasters), GameScoreboardTranslator.getMatchup(homeData, awayData), GameScoreboardTranslator.getScoring(homeData, awayData));
    }
  }, {
    key: 'getGameStatus',
    value: function getGameStatus(periodTime) {
      if (!'game_status' in periodTime) {
        throw new ReferenceError('game_status field not in data');
      }

      return _GameStatus2.default.from(periodTime.game_status);
    }
  }, {
    key: 'getStartTimestamp',
    value: function getStartTimestamp(gameData) {
      if (!('date' in gameData)) {
        throw new ReferenceError('date field missing');
      }

      if (!('time' in gameData)) {
        throw new ReferenceError('time field missing');
      }

      var rawStartTime = '' + gameData.date + gameData.time;

      return (0, _momentTimezone2.default)(dateStartTime, _Constants2.default.TRANSLATED_NBA_DATE_TIME_FORMAT).tz(_Constants2.default.DEFAULT_TIMEZONE).clone().tz("UTC").valueOf();
    }
  }, {
    key: 'getLocation',
    value: function getLocation(gameData) {
      if (!('arena' in gameData)) {
        throw new ReferenceError('arena field missing');
      }

      if (!('city' in gameData)) {
        throw new ReferenceError('city field missing');
      }

      if (!('state' in gameData)) {
        throw new ReferenceError('state field missing');
      }

      return new _Location2.default({
        arena: gameData.arena,
        city: gameData.city,
        state: gameData.state
      });
    }
  }, {
    key: 'getPeriod',
    value: function getPeriod(periodTime) {
      if (!('period_status' in periodTime)) {
        throw new ReferenceError('period_status field missing');
      }

      if (!('period_value' in periodTime)) {
        throw new ReferenceError('period_value field missing');
      }

      if (!('game_clock' in periodTime)) {
        throw new ReferenceError('game_clock field missing');
      }

      return new _Period2.default(parseInt(periodTime.period_value), periodTime.period_status, periodTime.game_clock);
    }
  }, {
    key: 'getBroadcasts',
    value: function getBroadcasts(broadcasters) {
      if (!('radio' in broadcasters)) {
        throw new ReferenceError('radio field missing');
      }

      if (!('tv' in broadcasters)) {
        throw new ReferenceError('tv field missing');
      }

      if (!('broadcaster' in broadcasters.radio)) {
        throw new ReferenceError('radio broadcasters field missing');
      }

      if (!('broadcaster' in broadcasters.tv)) {
        throw new ReferenceError('tv broadcasters field missing');
      }

      var broadcasts = [];
      var radioBroadcasters = broadcasters.radio.broadcaster;
      var tvBroadcasters = broadcasters.tv.broadcaster;

      radioBroadcasters.map(function (broadcast) {
        return broadcasts.push(GameScoreboardTranslator.getBroadcast(broadcast, _BroadcastMedium2.default.RADIO));
      });

      tvBroadcasters.map(function (broadcast) {
        return broadcasts.push(GameScoreboardTranslator.getBroadcast(broadcast, _BroadcastMedium2.default.TV));
      });

      return _immutable.List.of(broadcasts);
    }
  }, {
    key: 'getBroadcast',
    value: function getBroadcast(broadcast, medium) {
      if (!('scope' in broadcast)) {
        throw new ReferenceError('broadcast scope field missing');
      }

      if (!('display_name' in broadcast)) {
        throw new ReferenceError('broadcast display name field missing');
      }

      if (!(medium instanceof _BroadcastMedium2.default)) {
        throw new TypeError('medium must be a BroadcastMedium');
      }

      return new _Broadcast2.default(broadcast.scope, broadcast.display_name, medium);
    }
  }, {
    key: 'getMatchup',
    value: function getMatchup(homeData, awayData) {
      return new Matchup(GameScoreboardTranslator.getTeam(homeData), GameScoreboardTranslator.getTeam(awayData));
    }
  }, {
    key: 'getTeam',
    value: function getTeam(team) {
      if (!('city' in team)) {
        throw new ReferenceError('city field missing');
      }

      if (!('nickname' in team)) {
        throw new ReferenceError('nickname field missing');
      }

      if (!('abbreviation' in team)) {
        throw new ReferenceError('abbreviation field missing');
      }

      return new Team({
        city: team.city,
        nickname: team.nickname,
        abbreviation: team.abbreviation
      });
    }
  }, {
    key: 'getScoring',
    value: function getScoring(homeData, awayData) {
      return new GameScoring(GameScoreboardTranslator.getPeriodScores(homeData, awayData), GameScoreboardTranslator.getTotalScore(homeData, awayData));
    }
  }, {
    key: 'getPeriodScores',
    value: function getPeriodScores(homeData, awayData) {
      if (!('linescores' in homeData)) {
        throw new ReferenceError('home linescores field missing');
      }

      if (!('linescores' in awayData)) {
        throw new ReferenceError('away linescores field missing');
      }

      if (!'period' in homeData.linescores) {
        throw new ReferenceError('home period field missing');
      }

      if (!('period' in awayData.linescores)) {
        throw new ReferenceError('away period field missing');
      }

      var homePeriodScores = homeData.linescores.period;
      var awayPeriodScores = awayData.linescores.period;

      if (homePeriodScores.length != awayPeriodScores.length) {
        throw new Error('home period scores length is not equal to the away period scores length');
      }

      var periodScores = [];

      for (var index = 0; index < homePeriodScores.length; index++) {
        var homePeriodScore = homePeriodScores[length];
        var awayPeriodScore = awayPeriodScores[length];
        periodScores.push(GameScoreboardTranslator.getPeriodScore(homePeriodScore, awayPeriodScore));
      }

      return _immutable.List.of(periodScores);
    }
  }, {
    key: 'getPeriodScore',
    value: function getPeriodScore(homePeriodScore, awayPeriodScore) {
      if (!('period_value' in homePeriodScore)) {
        throw new ReferenceError('home period value field missing');
      }

      if (!('score' in homePeriodScore)) {
        throw new ReferenceError('home score field missing');
      }

      if (!('period_value' in awayPeriodScore)) {
        throw new ReferenceError('away period value field missing');
      }

      if (!('score' in awayPeriodScore)) {
        throw new ReferenceError('away score field missing');
      }

      if (homePeriodScore.period_value != awayPeriodScore.period_value) {
        throw new ReferenceError('different period values');
      }

      return new PeriodScore(homePeriodScore.period_value, new Score(homePeriodScore.score, awayPeriodScore.score));
    }
  }, {
    key: 'getTotalScore',
    value: function getTotalScore(homeData, awayData) {
      if (!('score' in homeData)) {
        throw new ReferenceError('home score field missing');
      }

      if (!('score' in awayData)) {
        throw new ReferenceError('visitor score field missing');
      }

      return new Score(parseInt(homeData.score), parseInt(awayData.score));
    }
  }, {
    key: 'getPeriodScores',
    value: function getPeriodScores(homeData, awayData) {}
  }]);

  return GameScoreboardTranslator;
}();

exports.default = GameScoreboardTranslator;