'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _Constants = require('../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _Formatter = require('./formatters/Formatter');

var _Formatter2 = _interopRequireDefault(_Formatter);

var _Score = require('../data/models/Score');

var _Score2 = _interopRequireDefault(_Score);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ActiveGameTableCreator = function () {
  function ActiveGameTableCreator() {
    _classCallCheck(this, ActiveGameTableCreator);
  }

  _createClass(ActiveGameTableCreator, null, [{
    key: 'create',
    value: function create(data) {
      var gameStatus = data.status;
      var periodValues = data.scoring.getPeriodValues();
      var table = new _cliTable2.default(ActiveGameTableCreator.getTableConfiguration(periodValues, gameStatus));
      ActiveGameTableCreator.generateRows(data).forEach(function (row) {
        return table.push(row.toJS());
      });
      return table.toString();
    }
  }, {
    key: 'getTableConfiguration',
    value: function getTableConfiguration(periodValues, gameStatus) {
      return {
        head: ActiveGameTableCreator.generateHeaders(periodValues, gameStatus)
      };
    }
  }, {
    key: 'generateRows',
    value: function generateRows(data) {
      var periodScores = data.scoring.periodScores;
      var totalScore = data.scoring.totalScore;
      var homeAbbreviation = data.matchup.homeTeam.abbreviation;
      var visitorAbbreviation = data.matchup.awayTeam.abbreviation;
      var startTime = data.getLocalizedStartDateTime();
      var broadcasts = data.getTvBroadcastsString();
      var numberOfColumns = ActiveGameTableCreator.getTableColumnLength(periodScores.size);
      var linescoresRows = ActiveGameTableCreator.generateLinescoresRows(homeAbbreviation, visitorAbbreviation, periodScores, totalScore);
      var metadataRows = ActiveGameTableCreator.generateMetadataRows(startTime, broadcasts, numberOfColumns);
      var rows = (0, _immutable.List)();
      rows = rows.concat(linescoresRows);
      rows = rows.concat(metadataRows);
      return rows;
    }
  }, {
    key: 'generateMetadataRows',
    value: function generateMetadataRows(startTime, broadcasts, numberOfColumns) {
      var rows = (0, _immutable.List)();
      rows = rows.push(ActiveGameTableCreator.generateMetadataRow(_nodeEmoji2.default.get(_Constants2.default.START_TIME_EMOJI_VALUE), startTime, numberOfColumns));
      rows = rows.push(ActiveGameTableCreator.generateMetadataRow(_nodeEmoji2.default.get(_Constants2.default.BROADCASTS_EMOJI_VALUE), broadcasts, numberOfColumns));
      return rows;
    }
  }, {
    key: 'generateMetadataRow',
    value: function generateMetadataRow(label, value, numberOfColumns) {
      return _immutable.List.of((0, _immutable.Map)({
        content: label,
        colSpan: 1
      }), (0, _immutable.Map)({
        content: value,
        colSpan: numberOfColumns - 1
      }));
    }
  }, {
    key: 'generateLinescoresRows',
    value: function generateLinescoresRows(homeAbbreviation, visitorAbbreviation, periodScores, totalScore) {
      var homeRow = _immutable.List.of(_nodeEmoji2.default.get(_Constants2.default.HOME_EMOJI_VALUE), _Formatter2.default.formatTeamAbbreviation(homeAbbreviation));
      var visitorRow = _immutable.List.of(_nodeEmoji2.default.get(_Constants2.default.VISITOR_EMOJI_VALUE), _Formatter2.default.formatTeamAbbreviation(visitorAbbreviation));
      periodScores.map(function (periodScore) {
        homeRow = homeRow.push(_Formatter2.default.formatScore(periodScore.score));
        visitorRow = visitorRow.push(_Formatter2.default.formatScore(new _Score2.default(periodScore.score.away, periodScore.score.home)));
      });
      homeRow = homeRow.push(ActiveGameTableCreator.applyTotalFormatting(_Formatter2.default.formatScore(totalScore)));
      visitorRow = visitorRow.push(ActiveGameTableCreator.applyTotalFormatting(_Formatter2.default.formatScore(new _Score2.default(totalScore.away, totalScore.home))));
      return _immutable.List.of(homeRow, visitorRow);
    }
  }, {
    key: 'generateHeaders',
    value: function generateHeaders(periodScores, gameSituation) {
      var headers = _immutable.List.of('', ActiveGameTableCreator.applyGameSituationFormatting(gameSituation));
      var periodHeaders = (0, _immutable.List)(periodScores.map(function (period) {
        return ActiveGameTableCreator.applyPeriodFormatting(period);
      }));
      headers = headers.merge(periodHeaders);
      headers = headers.merge(ActiveGameTableCreator.generateFormattedTotalHeader());
      return headers;
    }
  }, {
    key: 'generateFormattedTotalHeader',
    value: function generateFormattedTotalHeader() {
      return ActiveGameTableCreator.applyTotalFormatting(ActiveGameTableCreator.getTotalHeaderValue());
    }
  }, {
    key: 'getTableColumnLength',
    value: function getTableColumnLength(linescoresLength) {
      return linescoresLength + ActiveGameTableCreator.getNonLineScoresColumnsLength();
    }
  }, {
    key: 'applyGameSituationFormatting',
    value: function applyGameSituationFormatting(gameSituation) {
      return gameSituation.name.bold.magenta;
    }
  }, {
    key: 'applyPeriodFormatting',
    value: function applyPeriodFormatting(period) {
      return period.bold.cyan;
    }
  }, {
    key: 'applyTotalFormatting',
    value: function applyTotalFormatting(total) {
      return total.bold.underline.cyan;
    }
  }, {
    key: 'getNonLineScoresColumnsLength',
    value: function getNonLineScoresColumnsLength() {
      return 3;
    }
  }, {
    key: 'getTotalHeaderValue',
    value: function getTotalHeaderValue() {
      return 'Total';
    }
  }, {
    key: 'getMetadataLabelColumnLength',
    value: function getMetadataLabelColumnLength() {
      return 1;
    }
  }]);

  return ActiveGameTableCreator;
}();

exports.default = ActiveGameTableCreator;