'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nbaEmoji = require('nba-emoji');

var _nbaEmoji2 = _interopRequireDefault(_nbaEmoji);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _Outcome = require('../../data/models/Outcome');

var _Outcome2 = _interopRequireDefault(_Outcome);

var _Constants = require('../../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _Score = require('../../data/models/Score');

var _Score2 = _interopRequireDefault(_Score);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Formatter = function () {
  function Formatter() {
    _classCallCheck(this, Formatter);
  }

  _createClass(Formatter, null, [{
    key: 'formatLiveGamePeriod',
    value: function formatLiveGamePeriod(period) {
      var value = parseInt(period) - 4;
      if (value > 0) {
        return 'OT'.concat(value);
      }

      return 'Q'.concat(period);
    }
  }, {
    key: 'formatScore',
    value: function formatScore(score, opponentScore) {
      var strValue = score.toString();
      if (score > opponentScore) {
        return strValue.green;
      } else if (score < opponentScore) {
        return strValue.red;
      }

      return strValue.blue;
    }
  }, {
    key: 'formatGameSituation',
    value: function formatGameSituation(status, period, clock) {
      if (status == _Constants2.default.LIVE) {
        var formattedLiveGamePeriod = Formatter.formatLiveGamePeriod(period);
        return clock + ' ' + formattedLiveGamePeriod;
      }

      return status;
    }
  }, {
    key: 'formatTeamAbbreviation',
    value: function formatTeamAbbreviation(abbreviation) {
      var teamEmoji = _nbaEmoji2.default.getEmoji(abbreviation);
      return abbreviation + ' ' + teamEmoji;
    }
  }, {
    key: 'formatTotalScore',
    value: function formatTotalScore(score, opponentScore) {
      if (score == _Constants2.default.ONE_HUNDRED) {
        return _nodeEmoji2.default.get(_Constants2.default.SCORE_100_EMOJI_VALUE);
      }
      return Formatter.formatScore(score, opponentScore).bold;
    }
  }, {
    key: 'formatShortPlayerName',
    value: function formatShortPlayerName(firstName, lastName) {
      var firstCharacter = firstName.charAt(0);
      return firstCharacter + '. ' + lastName;
    }
  }, {
    key: 'formatScore',
    value: function formatScore(score) {
      if (!(score instanceof _Score2.default)) {
        throw new TypeError('score should be a Score object');
      }

      var scoreValue = score.home.toString();

      if (score.home === _Constants2.default.ONE_HUNDRED) {
        return _nodeEmoji2.default.get(_Constants2.default.SCORE_100_EMOJI_VALUE);
      }

      var outcome = score.getOutcome();
      switch (outcome) {
        case _Outcome2.default.TIE:
          return scoreValue.blue;

        case _Outcome2.default.AWAY_WIN:
          return scoreValue.red;

        case _Outcome2.default.HOME_WIN:
          return scoreValue.green;

        default:
          return scoreValue.red;
      }
    }
  }, {
    key: 'formatPeriodValue',
    value: function formatPeriodValue(periodValue) {
      if (typeof periodValue !== 'number') {
        throw new TypeError('expected numerical period value');
      }

      if (periodValue < 0) {
        throw new RangeError('expected non-negative period value');
      }

      return periodValue > 4 ? 'OT' + (periodValue - 4) : 'Q' + periodValue;
    }
  }]);

  return Formatter;
}();

exports.default = Formatter;