'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _immutable = require('immutable');

var _Formatter = require('./formatters/Formatter');

var _Formatter2 = _interopRequireDefault(_Formatter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PlayByPlayTableCreator = function () {
  function PlayByPlayTableCreator() {
    _classCallCheck(this, PlayByPlayTableCreator);
  }

  _createClass(PlayByPlayTableCreator, null, [{
    key: 'create',
    value: function create(data) {
      var table = new _cliTable2.default(PlayByPlayTableCreator.getTableConfiguration().toJS());
      data.forEach(function (play) {
        return table.push(PlayByPlayTableCreator.generateRow(play).toJS());
      });
      return table.toString();
    }
  }, {
    key: 'generateFormattedPlayClock',
    value: function generateFormattedPlayClock(clock, period) {
      var formattedPeriod = _Formatter2.default.formatLiveGamePeriod(period);
      return clock + ' ' + formattedPeriod;
    }
  }, {
    key: 'generateRow',
    value: function generateRow(play) {
      var playClock = PlayByPlayTableCreator.generateFormattedPlayClock(play.clock, play.period);
      return _immutable.List.of(playClock, play.description);
    }
  }, {
    key: 'getTableConfiguration',
    value: function getTableConfiguration() {
      return (0, _immutable.Map)({
        head: PlayByPlayTableCreator.getHeader()
      });
    }
  }, {
    key: 'getHeader',
    value: function getHeader() {
      return _immutable.List.of('Clock', 'Description');
    }
  }]);

  return PlayByPlayTableCreator;
}();

exports.default = PlayByPlayTableCreator;