'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _Constants = require('../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _Formatter = require('./formatters/Formatter');

var _Formatter2 = _interopRequireDefault(_Formatter);

var _Score = require('../data/models/Score');

var _Score2 = _interopRequireDefault(_Score);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StartedGameTableCreator = function () {
  function StartedGameTableCreator() {
    _classCallCheck(this, StartedGameTableCreator);

    this.nonLinescoresColumnsLength = 3;
    this.totalHeaderValue = 'Total';
    this.metadataLabelColSpan = 1;
  }

  _createClass(StartedGameTableCreator, [{
    key: 'generateFormattedTotalHeader',
    value: function generateFormattedTotalHeader() {
      return StartedGameTableCreator.applyTotalFormatting(this.totalHeaderValue);
    }
  }, {
    key: 'getTableColumnLength',
    value: function getTableColumnLength(linescoresLength) {
      return linescoresLength + this.nonLinescoresColumnsLength;
    }
  }, {
    key: 'generateHeaders',
    value: function generateHeaders(periodScores, gameSituation) {
      var headers = ['', StartedGameTableCreator.applyGameSituationFormatting(gameSituation)];
      periodScores.map(function (period) {
        return headers.push(StartedGameTableCreator.applyPeriodFormatting(period));
      });
      headers.push(this.generateFormattedTotalHeader());
      return headers;
    }
  }, {
    key: 'generateLinescoresRows',
    value: function generateLinescoresRows(homeAbbreviation, visitorAbbreviation, periodScores, totalScore) {
      var homeRow = [_nodeEmoji2.default.get(_Constants2.default.HOME_EMOJI_VALUE), _Formatter2.default.formatTeamAbbreviation(homeAbbreviation)];
      var visitorRow = [_nodeEmoji2.default.get(_Constants2.default.VISITOR_EMOJI_VALUE), _Formatter2.default.formatTeamAbbreviation(visitorAbbreviation)];
      periodScores.map(function (periodScore) {
        homeRow.push(_Formatter2.default.formatScore(periodScore.score));
        visitorRow.push(_Formatter2.default.formatScore(new _Score2.default(periodScore.score.away, periodScore.score.home)));
      });
      homeRow.push(StartedGameTableCreator.applyTotalFormatting(_Formatter2.default.formatScore(totalScore)));
      visitorRow.push(StartedGameTableCreator.applyTotalFormatting(_Formatter2.default.formatScore(new _Score2.default(totalScore.away, totalScore.home))));
      return [homeRow, visitorRow];
    }
  }, {
    key: 'generateMetadataRow',
    value: function generateMetadataRow(label, value, numberOfColumns) {
      return [{
        content: label,
        colSpan: this.metadataLabelColSpan
      }, {
        content: value,
        colSpan: numberOfColumns - 1
      }];
    }
  }, {
    key: 'generateMetadataRows',
    value: function generateMetadataRows(startTime, broadcasts, numberOfColumns) {
      var rows = [];
      rows.push(this.generateMetadataRow(_nodeEmoji2.default.get(_Constants2.default.START_TIME_EMOJI_VALUE), startTime, numberOfColumns));
      rows.push(this.generateMetadataRow(_nodeEmoji2.default.get(_Constants2.default.BROADCASTS_EMOJI_VALUE), broadcasts, numberOfColumns));
      return rows;
    }
  }, {
    key: 'generateRows',
    value: function generateRows(gameData) {
      var periodScores = gameData.scores.periodScores;
      var totalScore = gameData.scores.totalScore;
      var homeAbbreviation = gameData.metadata.home.abbreviation;
      var visitorAbbreviation = gameData.metadata.visitor.abbreviation;
      var startTime = gameData.metadata.getLocalizedStartDateTime();
      var broadcasts = gameData.metadata.getBroadcastsString();
      var numberOfColumns = this.getTableColumnLength(periodScores.length);
      var linescoresRows = this.generateLinescoresRows(homeAbbreviation, visitorAbbreviation, periodScores, totalScore);
      var metadataRows = this.generateMetadataRows(startTime, broadcasts, numberOfColumns);
      var rows = [];
      rows.push.apply(rows, linescoresRows);
      rows.push.apply(rows, metadataRows);
      return rows;
    }
  }, {
    key: 'create',
    value: function create(gameData) {
      var periodScores = gameData.scores.periodScores;
      var gameStatus = gameData.metadata.status;
      var periodValue = gameData.metadata.periodValue;
      var gameClock = gameData.metadata.gameClock;
      var periodValues = gameData.scores.getPeriodValues();
      var table = new _cliTable2.default({ head: this.generateHeaders(periodValues, gameStatus) });
      this.generateRows(gameData).map(function (row) {
        return table.push(row);
      });
      return table.toString();
    }
  }], [{
    key: 'applyGameSituationFormatting',
    value: function applyGameSituationFormatting(gameSituation) {
      return gameSituation.bold.magenta;
    }
  }, {
    key: 'applyPeriodFormatting',
    value: function applyPeriodFormatting(period) {
      return period.bold.cyan;
    }
  }, {
    key: 'applyTotalFormatting',
    value: function applyTotalFormatting(total) {
      return total.bold.underline.cyan;
    }
  }]);

  return StartedGameTableCreator;
}();

exports.default = StartedGameTableCreator;