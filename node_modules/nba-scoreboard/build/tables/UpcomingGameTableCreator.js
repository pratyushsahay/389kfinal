'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UpcomingGameTableCreator = function () {
  function UpcomingGameTableCreator() {
    _classCallCheck(this, UpcomingGameTableCreator);

    this.header = ['UPCOMING', 'HOME', 'AWAY', 'WATCH', 'ARENA'];
    this.defaultFormat = { head: this.header };
  }

  _createClass(UpcomingGameTableCreator, [{
    key: 'create',
    value: function create(upcomingGameMetadataList) {
      var table = new _cliTable2.default(this.defaultFormat);
      upcomingGameMetadataList.map(function (upcomingGameMetadata) {
        return table.push([upcomingGameMetadata.getLocalizedStartDateTime(), upcomingGameMetadata.home.getName(), upcomingGameMetadata.visitor.getName(), upcomingGameMetadata.getBroadcastsString(), upcomingGameMetadata.location.getFormattedLocation()]);
      });
      return table.toString();
    }
  }]);

  return UpcomingGameTableCreator;
}();

exports.default = UpcomingGameTableCreator;