'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jstimezonedetect = require('jstimezonedetect');

var _jstimezonedetect2 = _interopRequireDefault(_jstimezonedetect);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _Constants = require('../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _DataAggregator = require('../services/DataAggregator');

var _DataAggregator2 = _interopRequireDefault(_DataAggregator);

var _GamesOption = require('../data/GamesOption');

var _GamesOption2 = _interopRequireDefault(_GamesOption);

var _TableCreator = require('../services/tables/TableCreator');

var _TableCreator2 = _interopRequireDefault(_TableCreator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommandExecutionService = function () {
  function CommandExecutionService() {
    _classCallCheck(this, CommandExecutionService);
  }

  _createClass(CommandExecutionService, null, [{
    key: 'executeGamesCommand',
    value: function executeGamesCommand(option) {
      var date = CommandExecutionService.identifyDateFromOption(option);
      return _DataAggregator2.default.aggregate(date).then(function (data) {
        return _TableCreator2.default.create(data);
      });
    }
  }, {
    key: 'identifyDateFromOption',
    value: function identifyDateFromOption(option) {
      var gamesOption = CommandExecutionService.identifyGamesOption(option);
      if (gamesOption instanceof _GamesOption2.default) {
        var userDate = CommandExecutionService.identifyDateFromGamesOption(gamesOption);
        return CommandExecutionService.convertUserDateToApiTimezone(userDate);
      } else if ((0, _momentTimezone2.default)(option, 'YYYY-MM-DD', true).isValid()) {
        var _userDate = (0, _momentTimezone2.default)(option, 'YYYY-MM-DD', true).tz(_jstimezonedetect2.default.determine().name()).startOf('day');
        return CommandExecutionService.convertUserDateToApiTimezone(_userDate);
      }

      throw new Error('Unable to identify date from input option');
    }
  }, {
    key: 'convertUserDateToApiTimezone',
    value: function convertUserDateToApiTimezone(datetime) {
      // NBA Stats API takes EST Days
      return (0, _momentTimezone2.default)(datetime).tz(_Constants2.default.DEFAULT_TIMEZONE).startOf('day');
    }
  }, {
    key: 'identifyDateFromGamesOption',
    value: function identifyDateFromGamesOption(option) {
      var userTimezone = _jstimezonedetect2.default.determine().name();
      var startOfToday = (0, _momentTimezone2.default)().tz(userTimezone).startOf('day');
      switch (option) {
        case _GamesOption2.default.YESTERDAY:
          return startOfToday.subtract(1, 'days');

        case _GamesOption2.default.TOMORROW:
          return startOfToday.add(1, 'days');

        // if not YESTERDAY or TOMORROW, then must be TODAY
        default:
          return startOfToday;
      }
    }
  }, {
    key: 'identifyGamesOption',
    value: function identifyGamesOption(option) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _GamesOption2.default.enumValues[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var gamesOption = _step.value;

          if (option.toUpperCase() == gamesOption.value) {
            return gamesOption;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }]);

  return CommandExecutionService;
}();

exports.default = CommandExecutionService;