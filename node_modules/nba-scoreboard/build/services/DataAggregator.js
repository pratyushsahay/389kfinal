'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nbaStatsClient = require('nba-stats-client');

var _nbaStatsClient2 = _interopRequireDefault(_nbaStatsClient);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _immutable = require('immutable');

var _Game = require('../data/Game');

var _Game2 = _interopRequireDefault(_Game);

var _Games = require('../data/Games');

var _Games2 = _interopRequireDefault(_Games);

var _BoxScoreDataTranslator = require('./translators/BoxScoreDataTranslator');

var _BoxScoreDataTranslator2 = _interopRequireDefault(_BoxScoreDataTranslator);

var _PlaysTranslator = require('./translators/PlaysTranslator');

var _PlaysTranslator2 = _interopRequireDefault(_PlaysTranslator);

var _ScoreboardGamesTranslator = require('./translators/ScoreboardGamesTranslator');

var _ScoreboardGamesTranslator2 = _interopRequireDefault(_ScoreboardGamesTranslator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DataAggregator = function () {
  function DataAggregator() {
    _classCallCheck(this, DataAggregator);
  }

  _createClass(DataAggregator, null, [{
    key: 'aggregate',
    value: function aggregate(date) {
      return DataAggregator.getScoreboards(date).then(function (scoreboards) {
        return DataAggregator.getAllGameSpecificData(date, scoreboards);
      }).then(function (allGameData) {
        return DataAggregator.aggregateGames(allGameData);
      });
    }
  }, {
    key: 'getAllGameSpecificData',
    value: function getAllGameSpecificData(date, games) {
      var ids = (0, _immutable.List)();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = games[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var game = _step.value;

          if (!game.isUpcoming()) {
            ids = ids.push(game.id);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return _bluebird2.default.all([DataAggregator.getBoxScores(date, ids), DataAggregator.getAllPlays(date, ids), games]);
    }
  }, {
    key: 'aggregateGames',
    value: function aggregateGames(data) {
      var boxScores = data[0];
      var plays = data[1];
      var games = data[2];

      if (boxScores.size !== plays.size) {
        throw new RangeError('box scores and play by plays must have same size');
      }

      var started = (0, _immutable.List)();
      var upcoming = (0, _immutable.List)();
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = games[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var metadata = _step2.value;

          if (metadata.isUpcoming()) {
            upcoming = upcoming.push(metadata);
          } else {
            var gameId = metadata.id;
            started = started.push(new _Game2.default({
              metadata: metadata,
              boxScoreLeaders: boxScores.get(gameId),
              plays: plays.get(gameId)
            }));
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return new _Games2.default({
        started: started.sortBy(function (game) {
          return game.metadata.id;
        }),
        upcoming: upcoming.sortBy(function (metadata) {
          return metadata.id;
        })
      });
    }
  }, {
    key: 'getScoreboards',
    value: function getScoreboards(date) {
      return _nbaStatsClient2.default.getGames(date.year(), date.month() + 1, date.date()).then(function (games) {
        return _ScoreboardGamesTranslator2.default.translate(games);
      });
    }
  }, {
    key: 'getBoxScores',
    value: function getBoxScores(date, gameIds) {
      var translations = gameIds.map(function (gameId) {
        return DataAggregator.getBoxScore(date, gameId);
      });
      return _bluebird2.default.all(translations).then(function (results) {
        var mapping = (0, _immutable.Map)();
        for (var i = 0; i < results.length; i++) {
          mapping = mapping.set(gameIds.get(i), results[i]);
        }
        return mapping;
      });
    }
  }, {
    key: 'getBoxScore',
    value: function getBoxScore(date, gameId) {
      return _nbaStatsClient2.default.getBoxScore(date.year(), date.month() + 1, date.date(), gameId).then(function (boxScore) {
        return _BoxScoreDataTranslator2.default.translateBoxScoreData(boxScore);
      }).catch(function (err) {
        return console.error(err);
      });
    }
  }, {
    key: 'getAllPlays',
    value: function getAllPlays(date, gameIds) {
      var translations = gameIds.map(function (gameId) {
        return DataAggregator.getPlays(date, gameId);
      });
      return _bluebird2.default.all(translations).then(function (results) {
        var mapping = (0, _immutable.Map)();
        for (var i = 0; i < results.length; i++) {
          mapping = mapping.set(gameIds.get(i), results[i]);
        }
        return mapping;
      });
    }
  }, {
    key: 'getPlays',
    value: function getPlays(date, gameId) {
      return _nbaStatsClient2.default.getPlayByPlay(date.year(), date.month() + 1, date.date(), gameId).then(function (plays) {
        return _PlaysTranslator2.default.translate(plays);
      }).catch(function (err) {
        return console.error(err);
      });
    }
  }]);

  return DataAggregator;
}();

exports.default = DataAggregator;
;