'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _jstimezonedetect = require('jstimezonedetect');

var _jstimezonedetect2 = _interopRequireDefault(_jstimezonedetect);

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _immutable = require('immutable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UpcomingGamesTableCreator = function () {
  function UpcomingGamesTableCreator() {
    _classCallCheck(this, UpcomingGamesTableCreator);
  }

  _createClass(UpcomingGamesTableCreator, null, [{
    key: 'create',
    value: function create(data) {
      var table = new _cliTable2.default({
        head: UpcomingGamesTableCreator.getHeaders().toJS()
      });
      data.forEach(function (metadata) {
        return table.push(UpcomingGamesTableCreator.format(metadata).toJS());
      });
      return table.toString();
    }
  }, {
    key: 'format',
    value: function format(data) {
      return _immutable.List.of(data.getLocalizedStartDateTime(), data.matchup.homeTeam.getName(), data.matchup.awayTeam.getName(), data.getTvBroadcastsString(), data.location.getFormattedLocation());
    }
  }, {
    key: 'getHeaders',
    value: function getHeaders() {
      var values = _immutable.List.of(_nodeEmoji2.default.get('alarm_clock') + '  ' + _jstimezonedetect2.default.determine().name(), _nodeEmoji2.default.get('house'), _nodeEmoji2.default.get('bus'), _nodeEmoji2.default.get('tv'), _nodeEmoji2.default.get('round_pushpin'));

      return values.map(function (value) {
        return (0, _immutable.Map)({
          content: value,
          hAlign: 'center'
        });
      });
    }
  }]);

  return UpcomingGamesTableCreator;
}();

exports.default = UpcomingGamesTableCreator;