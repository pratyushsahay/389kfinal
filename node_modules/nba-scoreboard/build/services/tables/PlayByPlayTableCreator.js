'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _immutable = require('immutable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PlayByPlayTableCreator = function () {
  function PlayByPlayTableCreator() {
    _classCallCheck(this, PlayByPlayTableCreator);
  }

  _createClass(PlayByPlayTableCreator, null, [{
    key: 'create',
    value: function create(data) {
      var table = new _cliTable2.default({
        head: [{
          content: _nodeEmoji2.default.get('hourglass_flowing_sand'),
          hAlign: 'center'
        }, {
          content: 'Description',
          hAlign: 'center'
        }]
      });
      data.forEach(function (play) {
        return table.push([play.clock + ' ' + play.formatPeriod(), play.description]);
      });
      return table.toString();
    }
  }]);

  return PlayByPlayTableCreator;
}();

exports.default = PlayByPlayTableCreator;