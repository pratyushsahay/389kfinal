'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _immutable = require('immutable');

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _Constants = require('../../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _Score = require('../../data/Score');

var _Score2 = _interopRequireDefault(_Score);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ActiveGameTableCreator = function () {
  function ActiveGameTableCreator() {
    _classCallCheck(this, ActiveGameTableCreator);
  }

  _createClass(ActiveGameTableCreator, null, [{
    key: 'create',
    value: function create(data) {
      var table = new _cliTable2.default({
        head: ActiveGameTableCreator.generateHeaders(data).toJS()
      });

      ActiveGameTableCreator.generateRows(data).forEach(function (row) {
        return table.push(row.toJS());
      });

      return table.toString();
    }
  }, {
    key: 'generateHeaders',
    value: function generateHeaders(data) {
      var headers = _immutable.List.of('', data.status.name.bold.magenta);
      var periodHeaders = (0, _immutable.List)(data.scoring.getPeriodValues().map(function (period) {
        return period.bold.cyan;
      }));
      return headers.concat(periodHeaders).concat('Total'.bold.underline.cyan);
    }
  }, {
    key: 'generateRows',
    value: function generateRows(data) {
      var linescoresRows = ActiveGameTableCreator.generateLinescoresRows(data);
      var metadataRows = ActiveGameTableCreator.generateMetadataRows(data);
      return (0, _immutable.List)(linescoresRows).concat(metadataRows);
    }
  }, {
    key: 'generateMetadataRows',
    value: function generateMetadataRows(data) {
      var rowNumbers = data.scoring.periods.size + 3;
      var rows = (0, _immutable.List)();
      rows = rows.push(ActiveGameTableCreator.generateMetadataRow(_nodeEmoji2.default.get(_Constants2.default.START_TIME_EMOJI_VALUE), data.getLocalizedStartDateTime(), rowNumbers));
      return rows.push(ActiveGameTableCreator.generateMetadataRow(_nodeEmoji2.default.get(_Constants2.default.BROADCASTS_EMOJI_VALUE), data.getTvBroadcastsString(), rowNumbers));
    }
  }, {
    key: 'generateMetadataRow',
    value: function generateMetadataRow(label, value, numberOfColumns) {
      return _immutable.List.of((0, _immutable.Map)({
        content: label,
        colSpan: 1
      }), (0, _immutable.Map)({
        content: value,
        colSpan: numberOfColumns - 1
      }));
    }
  }, {
    key: 'generateLinescoresRows',
    value: function generateLinescoresRows(data) {
      var homeRow = _immutable.List.of(_nodeEmoji2.default.get(_Constants2.default.HOME_EMOJI_VALUE), data.matchup.homeTeam.getFormattedTeamAbbreviation());
      var visitorRow = _immutable.List.of(_nodeEmoji2.default.get(_Constants2.default.VISITOR_EMOJI_VALUE), data.matchup.awayTeam.getFormattedTeamAbbreviation());

      data.scoring.periods.forEach(function (periodScore) {
        var formattedScore = periodScore.score.format();
        homeRow = homeRow.push(formattedScore.home);
        visitorRow = visitorRow.push(formattedScore.away);
      });

      var formattedTotalScore = data.scoring.total.format();
      homeRow = homeRow.push(formattedTotalScore.home.bold.underline.cyan);
      visitorRow = visitorRow.push(formattedTotalScore.away.bold.underline.cyan);

      return _immutable.List.of(homeRow, visitorRow);
    }
  }]);

  return ActiveGameTableCreator;
}();

exports.default = ActiveGameTableCreator;