'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _jstimezonedetect = require('jstimezonedetect');

var _jstimezonedetect2 = _interopRequireDefault(_jstimezonedetect);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _CommandLineOutputClient = require('../output/CommandLineOutputClient.js');

var _CommandLineOutputClient2 = _interopRequireDefault(_CommandLineOutputClient);

var _Constants = require('../../constants/Constants.js');

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GamesCommand = function () {
  function GamesCommand() {
    _classCallCheck(this, GamesCommand);

    this.userTimezone = _jstimezonedetect2.default.determine().name();
    this.commandLineOutputClient = new _CommandLineOutputClient2.default();
  }

  _createClass(GamesCommand, [{
    key: 'generateDateRange',
    value: function generateDateRange(timeRangeOption) {
      var startOfToday = (0, _momentTimezone2.default)().tz(this.userTimezone).startOf("day");
      var endOfToday = (0, _momentTimezone2.default)().tz(this.userTimezone).endOf("day");
      if (typeof timeRangeOption === 'undefined') {
        return { startDate: startOfToday, endDate: endOfToday };
      }

      switch (timeRangeOption.toUpperCase()) {

        case _Constants2.default.GAMES_OPTIONS.TODAY:
          return { startDate: startOfToday, endDate: endOfToday };

        case _Constants2.default.GAMES_OPTIONS.YESTERDAY:
          return {
            startDate: (0, _momentTimezone2.default)().subtract(1, "days").tz(this.userTimezone).startOf("day"),
            endDate: (0, _momentTimezone2.default)().subtract(1, "days").tz(this.userTimezone).endOf("day")
          };

        case _Constants2.default.GAMES_OPTIONS.TOMORROW:
          return {
            startDate: (0, _momentTimezone2.default)().add(1, "days").tz(this.userTimezone).startOf("day"),
            endDate: (0, _momentTimezone2.default)().add(1, "days").tz(this.userTimezone).endOf("day")
          };

        default:
          var customDateTime = new Date(timeRangeOption);
          if ((0, _momentTimezone2.default)(customDateTime).isValid()) {
            return {
              startDate: (0, _momentTimezone2.default)(timeRangeOption).tz(this.userTimezone).startOf("day"),
              endDate: (0, _momentTimezone2.default)(timeRangeOption).tz(this.userTimezone).endOf("day")
            };
          }
      }
    }
  }, {
    key: 'run',
    value: function run(timeRangeOption) {
      var dateRange = this.generateDateRange(timeRangeOption);
      this.commandLineOutputClient.outputGamesForDateRange(dateRange.startDate, dateRange.endDate);
    }
  }]);

  return GamesCommand;
}();

exports.default = GamesCommand;
;