'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _GameDataClient = require('../../data/clients/GameDataClient');

var _GameDataClient2 = _interopRequireDefault(_GameDataClient);

var _StartedGameTableCreator = require('../../tables/StartedGameTableCreator');

var _StartedGameTableCreator2 = _interopRequireDefault(_StartedGameTableCreator);

var _UpcomingGameTableCreator = require('../../tables/UpcomingGameTableCreator');

var _UpcomingGameTableCreator2 = _interopRequireDefault(_UpcomingGameTableCreator);

var _PlayByPlayTableCreator = require('../../tables/PlayByPlayTableCreator');

var _PlayByPlayTableCreator2 = _interopRequireDefault(_PlayByPlayTableCreator);

var _BoxScoreTableCreator = require('../../tables/BoxScoreTableCreator');

var _BoxScoreTableCreator2 = _interopRequireDefault(_BoxScoreTableCreator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommandLineOutputClient = function () {
  function CommandLineOutputClient() {
    _classCallCheck(this, CommandLineOutputClient);

    this.client = new _GameDataClient2.default();
    this.startedGameTableCreator = new _StartedGameTableCreator2.default();
    this.upcomingGameTableCreator = new _UpcomingGameTableCreator2.default();
    this.boxScoreTableCreator = new _BoxScoreTableCreator2.default();
  }

  _createClass(CommandLineOutputClient, [{
    key: 'generateFirstRow',
    value: function generateFirstRow(data) {
      var row = [this.startedGameTableCreator.create(data)];
      row.push(_PlayByPlayTableCreator2.default.create(data.playByPlay));
      return row;
    }
  }, {
    key: 'generateSecondRow',
    value: function generateSecondRow(data) {
      var row = [];
      row.push(this.boxScoreTableCreator.create(data.boxScoreLeaders.home));
      row.push(this.boxScoreTableCreator.create(data.boxScoreLeaders.visitor));
      return row;
    }
  }, {
    key: 'outputStartedGameTable',
    value: function outputStartedGameTable(data) {
      var table = new _cliTable2.default();
      table.push(this.generateFirstRow(data));
      table.push(this.generateSecondRow(data));
      console.log(table.toString());
    }
  }, {
    key: 'outputUpcomingGames',
    value: function outputUpcomingGames(upcomingGames) {
      if (upcomingGames.length > 0) {
        console.log(this.upcomingGameTableCreator.create(upcomingGames));
      }
    }
  }, {
    key: 'outputGames',
    value: function outputGames(data) {
      var upcomingGames = [];
      for (var gameId in data) {
        var gameData = data[gameId];
        if (gameData.metadata.isUpcoming()) {
          upcomingGames.push(gameData.metadata);
        } else {
          this.outputStartedGameTable(gameData);
        }
      }
      this.outputUpcomingGames(upcomingGames);
    }
  }, {
    key: 'outputDateRange',
    value: function outputDateRange(data) {
      var _this = this;

      data.map(function (dayData) {
        return _this.outputGames(dayData);
      });
    }
  }, {
    key: 'outputGamesForDateRange',
    value: function outputGamesForDateRange(startDate, endDate) {
      var _this2 = this;

      return this.client.fetchDataForDateRange(startDate, endDate).then(function (data) {
        return _this2.outputDateRange(data);
      });
    }
  }]);

  return CommandLineOutputClient;
}();

exports.default = CommandLineOutputClient;