"use strict";
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _commander = require("commander");

var _commander2 = _interopRequireDefault(_commander);

var _GamesCommand = require("./commands/GamesCommand");

var _GamesCommand2 = _interopRequireDefault(_GamesCommand);

var _NbaGamesCommandHelp = require("../constants/NbaGamesCommandHelp");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommandLineClient = function () {
  function CommandLineClient() {
    _classCallCheck(this, CommandLineClient);

    this.gamesCommand = new _GamesCommand2.default();
  }

  _createClass(CommandLineClient, [{
    key: "run",
    value: function run() {
      var _this = this;

      _commander2.default.version("0.0.1");

      _commander2.default.on('help', function () {
        console.log(_NbaGamesCommandHelp.HELP);
        process.exit(1);
      });

      _commander2.default.command("games [time]").description("get nba games").action(function (time) {
        return _this.gamesCommand.run(time);
      });

      _commander2.default.parse(process.argv);

      if (_commander2.default.args.length === 0) {
        console.log(_NbaGamesCommandHelp.HELP);
      }
    }
  }]);

  return CommandLineClient;
}();

exports.default = CommandLineClient;