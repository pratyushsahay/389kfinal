'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _jstimezonedetect = require('jstimezonedetect');

var _jstimezonedetect2 = _interopRequireDefault(_jstimezonedetect);

var _TranslatedScoreboard = require('../../data/models/TranslatedScoreboard');

var _TranslatedScoreboard2 = _interopRequireDefault(_TranslatedScoreboard);

var _GameMetadata = require('../../data/models/GameMetadata');

var _GameMetadata2 = _interopRequireDefault(_GameMetadata);

var _Score = require('../../data/models/Score');

var _Score2 = _interopRequireDefault(_Score);

var _PeriodScore = require('../../data/models/PeriodScore');

var _PeriodScore2 = _interopRequireDefault(_PeriodScore);

var _Team = require('../../data/models/Team');

var _Team2 = _interopRequireDefault(_Team);

var _Location = require('../../data/models/Location');

var _Location2 = _interopRequireDefault(_Location);

var _GameScores = require('../../data/models/GameScores');

var _GameScores2 = _interopRequireDefault(_GameScores);

var _HtmlEscaper = require('../../utils/HtmlEscaper');

var _HtmlEscaper2 = _interopRequireDefault(_HtmlEscaper);

var _Constants = require('../../constants/Constants');

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ScoreboardDataTranslator = function () {
  function ScoreboardDataTranslator() {
    _classCallCheck(this, ScoreboardDataTranslator);
  }

  _createClass(ScoreboardDataTranslator, [{
    key: 'translate',
    value: function translate(scoreboardData) {
      var translatedData = {};
      scoreboardData.sports_content.games.game.map(function (gameData) {
        return translatedData[gameData.id] = ScoreboardDataTranslator.translateGameData(gameData);
      });
      return translatedData;
    }
  }], [{
    key: 'translateGameData',
    value: function translateGameData(gameData) {
      var dateStartTime = '' + gameData.date + gameData.time;

      var previewAvailable = gameData.previewAvailable;
      var recapAvailable = gameData.recapAvailable;

      var periodStatus = _HtmlEscaper2.default.escapeHtml(gameData.period_time.period_status);
      var periodValue = _HtmlEscaper2.default.escapeHtml(gameData.period_time.period_value);
      var gameStatus = gameData.period_time.game_status;
      var gameClock = _HtmlEscaper2.default.escapeHtml(gameData.period_time.game_clock);
      var gameUrl = gameData.game_url;

      var location = new _Location2.default({
        arena: _HtmlEscaper2.default.escapeHtml(gameData.arena),
        city: _HtmlEscaper2.default.escapeHtml(gameData.city),
        state: _HtmlEscaper2.default.escapeHtml(gameData.state)
      });

      var visitorTeam = new _Team2.default({
        city: _HtmlEscaper2.default.escapeHtml(gameData.visitor.city),
        nickname: _HtmlEscaper2.default.escapeHtml(gameData.visitor.nickname),
        abbreviation: _HtmlEscaper2.default.escapeHtml(gameData.visitor.abbreviation)
      });

      var homeTeam = new _Team2.default({
        city: _HtmlEscaper2.default.escapeHtml(gameData.home.city),
        nickname: _HtmlEscaper2.default.escapeHtml(gameData.home.nickname),
        abbreviation: _HtmlEscaper2.default.escapeHtml(gameData.home.abbreviation)
      });

      var metadata = new _GameMetadata2.default({
        id: gameData.id,
        status: ScoreboardDataTranslator.getGameStatus(periodStatus, gameStatus),
        url: gameUrl,
        unixMillisecondsStartTime: ScoreboardDataTranslator.getUnixMillisecondsStartTime(dateStartTime),
        location: location,
        isPreviewAvailable: ScoreboardDataTranslator.isPreviewAvailable(previewAvailable),
        isRecapAvailable: ScoreboardDataTranslator.isRecapAvailable(recapAvailable),
        periodValue: periodValue,
        periodStatus: periodStatus,
        gameClock: gameClock,
        broadcasts: ScoreboardDataTranslator.getBroadcasts(gameData.broadcasters),
        visitor: visitorTeam,
        home: homeTeam
      });

      var scores = new _GameScores2.default({
        periodScores: ScoreboardDataTranslator.getTeamLinescores(gameData.home, gameData.visitor),
        totalScore: new _Score2.default(parseInt(gameData.home.score), parseInt(gameData.visitor.score))
      });

      return new _TranslatedScoreboard2.default({
        scores: scores,
        metadata: metadata
      });
    }
  }, {
    key: 'getBroadcasts',
    value: function getBroadcasts(scoreboardData) {
      return scoreboardData.tv.broadcaster.map(function (broadcast) {
        return broadcast.display_name;
      });
    }
  }, {
    key: 'hasOnlyOneLinescorePeriod',
    value: function hasOnlyOneLinescorePeriod(periodData) {
      return 'period_name' in periodData && 'score' in periodData;
    }
  }, {
    key: 'getTeamLinescores',
    value: function getTeamLinescores(homeTeamData, visitorTeamData) {
      var linescores = [];
      if (!('linescores' in homeTeamData) || !('linescores' in visitorTeamData)) {
        return linescores;
      }

      var homeLinescores = homeTeamData.linescores;
      var visitorLinescores = visitorTeamData.linescores;
      if (ScoreboardDataTranslator.hasOnlyOneLinescorePeriod(homeLinescores.period)) {
        var score = new _Score2.default(parseInt(homeLinescores.period.score), parseInt(visitorLinescores.period.score));
        linescores.push(new _PeriodScore2.default({
          period: parseInt(homeLinescores.period.period_value),
          score: score }));
      } else {
        for (var index = 0; index < homeLinescores.period.length; index++) {
          var _score = new _Score2.default(parseInt(homeLinescores.period[index].score), parseInt(visitorLinescores.period[index].score));
          linescores.push(new _PeriodScore2.default({
            period: parseInt(homeLinescores.period[index].period_value),
            score: _score }));
        }
      }
      return linescores;
    }
  }, {
    key: 'getUnixMillisecondsStartTime',
    value: function getUnixMillisecondsStartTime(dateStartTime) {
      return (0, _momentTimezone2.default)(dateStartTime, _Constants2.default.TRANSLATED_NBA_DATE_TIME_FORMAT).tz(_Constants2.default.DEFAULT_TIMEZONE).clone().tz("UTC").valueOf();
    }
  }, {
    key: 'getGameStatus',
    value: function getGameStatus(periodStatus, gameStatus) {
      if (periodStatus != "Halftime") {
        return _Constants2.default.TRANSLATED_GAME_STATUS_MAP[gameStatus];
      }

      return periodStatus;
    }
  }, {
    key: 'isPreviewAvailable',
    value: function isPreviewAvailable(isAvailable) {
      return isAvailable == 1;
    }
  }, {
    key: 'isRecapAvailable',
    value: function isRecapAvailable(isAvailable) {
      return isAvailable == 1;
    }
  }]);

  return ScoreboardDataTranslator;
}();

exports.default = ScoreboardDataTranslator;