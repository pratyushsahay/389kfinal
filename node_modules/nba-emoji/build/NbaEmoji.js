'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Team = require('./Team');

var _Team2 = _interopRequireDefault(_Team);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NbaEmoji = function () {
  function NbaEmoji() {
    _classCallCheck(this, NbaEmoji);
  }

  _createClass(NbaEmoji, null, [{
    key: 'getEmoji',
    value: function getEmoji(teamAbbreviation) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _Team2.default.enumValues[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var team = _step.value;

          if (team.abbreviation == teamAbbreviation) {
            return team == NbaEmoji.getCurrentChampion() ? NbaEmoji.getCurrentChampionEmoji() : team.emoji;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      throw new Error('Unknown team abbreviation');
    }
  }, {
    key: 'getCurrentChampion',
    value: function getCurrentChampion() {
      return _Team2.default.CLEVELAND_CAVALIERS;
    }
  }, {
    key: 'getCurrentChampionEmoji',
    value: function getCurrentChampionEmoji() {
      return '🏆';
    }
  }]);

  return NbaEmoji;
}();

exports.default = NbaEmoji;